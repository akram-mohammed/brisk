{
    "contents" : "#' @title Group Matrix Permutation Test\n#' \n#' @author Brian Caffo\n#' \n#' @description Performs permutation tests for paired and groupd data in the form of a matrix\n#' groups must be aligned by columns. Multiplicity accounted for by taking the max\n#' larger values of the statistic points to the alternative. Parallelization is available\n#' by setting cores > 1\n#' @details The matrix has to be structured as features along the columns and subjects \n#' along the rows\n#' \n#' @param paired whether the observations are paired or not. If so, then the \n#' group data matrices have to be the same size\n#' @param cores the number of compute cores to be used (note this may not be faster)\n#' @param permutations the number of permutations\n#' @param stat the statistic (of the form \\code{f(x, y)}) that returns the statistic  \n#' \n\ngroupMatrixPermutationTest <- function(group1MatrixData, group2MatrixData, \n                            paired = FALSE, \n                            cores = 1, \n                            permutations = 1000, \n                            stat = function(x, y) abs(mean(x) - mean(y))\n                            ){\n    ##some quick dimension checks\n    stopifnot(ncol(group1MatrixData) == ncol(group2MatrixData))\n\n    ##if paired, they have to have the same number of subjects in the same order\n    if (paired) stopifnot(nrow(group1MatrixData) == nrow(group2MatrixData))\n\n    v <- ncol(group1MatrixData)\n    n <- nrow(group1MatrixData)\n    m <- nrow(group2MatrixData)\n\n    ##the observed statistics value\n    observedStat <- sapply(1 : ncol(group1MatrixData),\n            function(i) {\n                x <- group1MatrixData[,i]\n                y <- group2MatrixData[,i]\n                stat(x, y)\n            }\n    )\n    \n    ##the two strategies for generating permutations (paired and unpaired case). Note all of the\n    ##permutations are generated at first\n    if (paired){\n        ##each column is an indicator of whether that pair should switch groups\n        permIDXs <- matrix(sample(c(1, 0), size = n * permutations, replace = TRUE), n, permutations)\n    }\n    else {\n        ##each column is a reshuffling of the subject IDs\n        permIDXs <- sapply(1 : permutations, function(x) sample(1 : (m + n)))\n    }\n        \n    ##a parallel function\n    myApply <- function(X, FUN){\n        if (cores > 1){\n            parApply(cl, X, 2, FUN)\n        }\n        else{\n            apply(X, 2, FUN)\n        }\n    }\n\n    if (cores == 1) cl <- NULL\n    else cl <-makeCluster(getOption(\"cl.cores\", cores))\n\n    permutationDistribution <- myApply(permIDXs, \n        function(perm){\n            ##for each permutation take the maximum statistic value\n            max(\n                ##loop over all v\n                sapply(1 : v, \n                    function(i) {\n                        x <- group1MatrixData[,i]\n                        y <- group2MatrixData[,i]\n                        if (paired){\n                            x <- x * perm + y * (1 - perm)\n                            y <- x * (1 - perm) + y * perm\n                        }\n                        else {\n                            temp <- c(x, y)\n                            x <- temp[perm[1 : n]]\n                            y <- temp[perm[(n + 1) : (n + m)]]\n                        }\n                        return(stat(x, y))\n                    }\n                )\n            )\n        }\n    )\n    if (cores > 1) stopCluster(cl)\n\n    out <- list(pvalues = sapply(observedStat, function(x) mean(permutationDistribution > x)),\n                observedStat = observedStat,\n                permutationDistribution = permutationDistribution)\n    \n    return(out)\n}\n",
    "created" : 1398880714104.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3614409007",
    "id" : "FC314EE4",
    "lastKnownWriteTime" : 1398881784,
    "path" : "~/GitHub/brisk/rsfmriGraph/R/groupMatrixPermutationTest.R",
    "project_path" : "R/groupMatrixPermutationTest.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}