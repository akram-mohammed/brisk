{
    "contents" : "##Analysis for Kyranna's submission\n\n##getting the necessary code loaded in\n#library(fmri)\n#library(AnalyzeFMRI)\n#library(rgl)\n#library(misc3d)\n#library(healthvis)\n#library(parallel)\n#library(perm.test)\n#library(igraph)\n\n# source('~/sandboxes/brisk/rsfmriGraph/R/graphVis.R')\n# source('~/sandboxes/brisk/rsfmriGraph/R/graphVis3D.R')\n# source('~/sandboxes/brisk/rsfmriGraph/R/graphVisSphere3D.R')\n# source('~/sandboxes/brisk/rsfmriGraph/R/templateBrainGraphVis.R')\n# source('~/sandboxes/brisk/rsfmriGraph/R/rsfmriGraphUtilityFunctions.R')\n# source('~/sandboxes/brisk/rsfmriGraph/R/d3ForceGraph.R')\n# source('~/sandboxes/brisk/rsfmriGraph/R/corCreate.R')\n# source('~/sandboxes/brisk/rsfmriGraph/R/groupMatrixPermutationTest.R')\n\n#gdLoc <- \"c:/Users/bcaffo/Google Drive/\"\ngdLoc <- \"/Users/Brian/Google Drive/\"\ndataDir <- paste(gdLoc, \"Work/Research/Investigators/Kyrana/\", sep = \"\")\ncontrolDir <- paste(dataDir, \"controls/\", sep = \"\")\nppaDir <- paste(dataDir, \"ppa/\", sep = \"\")\n\nroiLookUpTable <- read.csv(\"/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/JhuMniSSTypeIILabelLookupTable_inslima_fewregions.csv\", stringsAsFactors=FALSE)\n\nofInterest <- roiLookUpTable$matrix.row\nroiNames <- roiLookUpTable$roiShortName\nroiCount <- nrow(roiLookUpTable)\nroiNumbers <- roiLookUpTable$roiIndex\n\ncontrols <- corCreate(fileList = dir(controlDir), \n                      path = controlDir, \n                      ##read.delim works better than read.csv (it's not a csv file)\n                      loadFunction = read.delim, \n                      ##this data set has ROIs on the rows and TR on the columns\n                      transpose = TRUE,\n                      what = \"cor\",\n                      asMatrix = FALSE, \n                      columns = ofInterest, \n                      columnNames = roiNames,\n                      ##arguments to read.delim\n                      header = FALSE, sep = \"\")\n\nppa <- corCreate(fileList = dir(ppaDir), \n                      path = ppaDir, \n                      ##read.delim works better than read.csv (it's not a csv file)\n                      loadFunction = read.delim, \n                      ##this data set has ROIs on the rows and TR on the columns\n                      transpose = TRUE,\n                      what = \"cor\",\n                      asMatrix = FALSE, \n                      columns = ofInterest, \n                      columnNames = roiNames, \n                      ##arguments to read.delim\n                      header = FALSE, sep = \"\")\n\n\n\n##load the covariate data\nload(\"/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/longPairData.rda\")\nlongPairData <- merge(longPairData, data.frame(id = c(names(ppa), names(controls))), by = \"id\")\n##verify that the data is in the order of the data files\nall(longPairData$id == c(names(ppa), names(controls)))\n\n##now switch the order so that they agree\nppaShuffle <- order(longPairData$pair[longPairData$group == 1])\ncontrolShuffle <- order(longPairData$pair[longPairData$group == 0])\nppa <- ppa[ppaShuffle]\ncontrols <- controls[controlShuffle]\n\n##convert the covariance\nppaMat <- t(sapply(ppa, cor2vec))\ncontrolsMat <- t(sapply(controls, cor2vec))\n\n##fisher's z transformation of the difference\ndifference <- .5 * log((1 + ppaMat) / (1 - ppaMat)) - .5 * log((1 + controlsMat) / (1 - controlsMat))\nttestPvalue <- apply(difference, 2, function(x) t.test(x)$p.value)\n\nptestOut <- groupMatrixPermutationTest(ppaMat, controlsMat, \n                                       paired = TRUE, \n                                       cores = 1, \n                                       #                                       stat = function(x, y) \n                                       #                                         abs(t.test(fz(x) - fz(y))$statistic), \n                                       permutations = 1000)\n\npermDist <- data.frame(AbsCorrDiff = ptestOut$permutationDistribution)\nm <- ggplot(permDist, aes(x = AbsCorrDiff)) \nm + geom_density(size = 2, fill = \"lightblue\") + geom_vline(xintercept = max(ptestOut$observedStat), size = 2)\n\n\n\ngraphVis3D(ptestOut$pvalues, roiNames, .01, col = \"darkblue\", lwd = 2)\n\n\ngraphVis(ttestPvalue, roiNames, .01, col = \"darkblue\", lwd = 2)\n\nroiImage <- f.read.analyze.volume(file= \"/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/JHU_MNI_SS_WMPM_TypeII_temp_insula_lima_a.img\")[,,,1]\n\ntemplateImage <- f.read.analyze.volume(file = \"/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/Eva_T1.img\")[,,,1]\ntemplateBrainGraphVis(pvalues = ttestPvalue,\n                      cutoff = .01,\n                      templateImage = templateImage,\n                      roiImage = roiImage,\n                      roiNumbers = roiNumbers,\n                      roiNames,\n                      lwd = 2,\n                      col = \"lightblue\")\n\ngraphVis3D(ttestPvalue, roiNames, .01, col = \"darkblue\", lwd = 2)\n\ngraphVis3DSphere(ttestPvalue, roiNames, .01, col = \"darkblue\", lwd = 2)\n\n\nd3ForceGraph(ttestPvalue, roiNames, cutoff = .05)\nbrowseURL('d3ForceGraph.html')\n\nnsubj = 40\nnobs = 25\ndata1 <- matrix(rnorm(nsubj*nobs), nsubj, nobs)\nrownames(data1) <- sapply(1:nsubj, function(x){paste(\"S\", x, sep=\"\")})\ncolnames(data1) <- sapply(1:nobs, function(x){paste(\"V\", x, sep=\"\")})\n# Create a set of discrete and continuous covariates to sort by\nsort.by1 <- data.frame(\"Treatment\"=rbinom(nsubj, 1, 0.4), \"Age\"=rpois(nsubj, 30))\nheatmapVis(data=data1, sort.by=sort.by1) \n\n\n\n\n",
    "created" : 1398883131083.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "838292494",
    "id" : "47DBD555",
    "lastKnownWriteTime" : 1398885751,
    "path" : "C:/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/analysis.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}