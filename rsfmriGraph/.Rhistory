library(brisk)
?mean
?devices
?png
library(brisk)
?rsfmriGraphUtilityFunctions
?brisk
??brisk
?corCreate
library(brisk)
library(brisk)
?brisk
?corCreate
library(brisk)
?upper.tri
install.packages("misc3d")
install.packages("misc3d")
library(brisk)
gdLoc <- "/Users/Brian/Google Drive/"
dataDir <- paste(gdLoc, "Work/Research/Investigators/Kyrana/", sep = "")
controlDir <- paste(dataDir, "controls/", sep = "")
ppaDir <- paste(dataDir, "ppa/", sep = "")
roiLookUpTable <- read.csv("JhuMniSSTypeIILabelLookupTable_inslima_fewregions.csv", stringsAsFactors=FALSE)
roiLookUpTable <- read.csv("/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/JhuMniSSTypeIILabelLookupTable_inslima_fewregions.csv", stringsAsFactors=FALSE)
ofInterest <- roiLookUpTable$matrix.row
roiNames <- roiLookUpTable$roiShortName
roiCount <- nrow(roiLookUpTable)
roiNumbers <- roiLookUpTable$roiIndex
controls <- corCreate(fileList = dir(controlDir),
path = controlDir,
##read.delim works better than read.csv (it's not a csv file)
loadFunction = read.delim,
##this data set has ROIs on the rows and TR on the columns
transpose = TRUE,
what = "cor",
asMatrix = FALSE,
columns = ofInterest,
columnNames = roiNames,
##arguments to read.delim
header = FALSE, sep = "")
ppa <- corCreate(fileList = dir(ppaDir),
path = ppaDir,
##read.delim works better than read.csv (it's not a csv file)
loadFunction = read.delim,
##this data set has ROIs on the rows and TR on the columns
transpose = TRUE,
what = "cor",
asMatrix = FALSE,
columns = ofInterest,
columnNames = roiNames,
##arguments to read.delim
header = FALSE, sep = "")
load("longPairData.rda")
longPairData <- merge(longPairData, data.frame(id = c(names(ppa), names(controls))), by = "id")
##verify that the data is in the order of the data files
all(longPairData$id == c(names(ppa), names(controls)))
load("/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/longPairData.rda")
longPairData <- merge(longPairData, data.frame(id = c(names(ppa), names(controls))), by = "id")
##verify that the data is in the order of the data files
all(longPairData$id == c(names(ppa), names(controls)))
##now switch the order so that they agree
ppaShuffle <- order(longPairData$pair[longPairData$group == 1])
controlShuffle <- order(longPairData$pair[longPairData$group == 0])
ppa <- ppa[ppaShuffle]
controls <- controls[controlShuffle]
##convert the covariance
ppaMat <- t(sapply(ppa, cor2vec))
controlsMat <- t(sapply(controls, cor2vec))
library(brisk)
##convert the covariance
ppaMat <- t(sapply(ppa, cor2vec))
controlsMat <- t(sapply(controls, cor2vec))
?rsfmriGraphUtilityFunctions
library(brisk)
?cor2vec
library(brisk)
?cor2vec
##Analysis for Kyranna's submission
##getting the necessary code loaded in
#library(fmri)
#library(AnalyzeFMRI)
#library(rgl)
#library(misc3d)
#library(healthvis)
#library(parallel)
#library(perm.test)
#library(igraph)
# source('~/sandboxes/brisk/rsfmriGraph/R/graphVis.R')
# source('~/sandboxes/brisk/rsfmriGraph/R/graphVis3D.R')
# source('~/sandboxes/brisk/rsfmriGraph/R/graphVisSphere3D.R')
# source('~/sandboxes/brisk/rsfmriGraph/R/templateBrainGraphVis.R')
# source('~/sandboxes/brisk/rsfmriGraph/R/rsfmriGraphUtilityFunctions.R')
# source('~/sandboxes/brisk/rsfmriGraph/R/d3ForceGraph.R')
# source('~/sandboxes/brisk/rsfmriGraph/R/corCreate.R')
# source('~/sandboxes/brisk/rsfmriGraph/R/groupMatrixPermutationTest.R')
#gdLoc <- "c:/Users/bcaffo/Google Drive/"
gdLoc <- "/Users/Brian/Google Drive/"
dataDir <- paste(gdLoc, "Work/Research/Investigators/Kyrana/", sep = "")
controlDir <- paste(dataDir, "controls/", sep = "")
ppaDir <- paste(dataDir, "ppa/", sep = "")
roiLookUpTable <- read.csv("/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/JhuMniSSTypeIILabelLookupTable_inslima_fewregions.csv", stringsAsFactors=FALSE)
ofInterest <- roiLookUpTable$matrix.row
roiNames <- roiLookUpTable$roiShortName
roiCount <- nrow(roiLookUpTable)
roiNumbers <- roiLookUpTable$roiIndex
controls <- corCreate(fileList = dir(controlDir),
path = controlDir,
##read.delim works better than read.csv (it's not a csv file)
loadFunction = read.delim,
##this data set has ROIs on the rows and TR on the columns
transpose = TRUE,
what = "cor",
asMatrix = FALSE,
columns = ofInterest,
columnNames = roiNames,
##arguments to read.delim
header = FALSE, sep = "")
ppa <- corCreate(fileList = dir(ppaDir),
path = ppaDir,
##read.delim works better than read.csv (it's not a csv file)
loadFunction = read.delim,
##this data set has ROIs on the rows and TR on the columns
transpose = TRUE,
what = "cor",
asMatrix = FALSE,
columns = ofInterest,
columnNames = roiNames,
##arguments to read.delim
header = FALSE, sep = "")
##load the covariate data
load("/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/longPairData.rda")
longPairData <- merge(longPairData, data.frame(id = c(names(ppa), names(controls))), by = "id")
##verify that the data is in the order of the data files
all(longPairData$id == c(names(ppa), names(controls)))
##now switch the order so that they agree
ppaShuffle <- order(longPairData$pair[longPairData$group == 1])
controlShuffle <- order(longPairData$pair[longPairData$group == 0])
ppa <- ppa[ppaShuffle]
controls <- controls[controlShuffle]
##convert the covariance
ppaMat <- t(sapply(ppa, cor2vec))
controlsMat <- t(sapply(controls, cor2vec))
?cor2vec
cor2vec
library(brisk)
cor2vec
devtools::load_all(".")
##convert the covariance
ppaMat <- t(sapply(ppa, cor2vec))
controlsMat <- t(sapply(controls, cor2vec))
##fisher's z transformation of the difference
difference <- .5 * log((1 + ppaMat) / (1 - ppaMat)) - .5 * log((1 + controlsMat) / (1 - controlsMat))
ttestPvalue <- apply(difference, 2, function(x) t.test(x)$p.value)
ptestOut <- groupMatrixPermutationTest(ppaMat, controlsMat,
paired = TRUE,
cores = 1,
#                                       stat = function(x, y)
#                                         abs(t.test(fz(x) - fz(y))$statistic),
permutations = 1000)
permDist <- data.frame(AbsCorrDiff = ptestOut$permutationDistribution)
m <- ggplot(permDist, aes(x = AbsCorrDiff))
m + geom_density(size = 2, fill = "lightblue") + geom_vline(xintercept = max(ptestOut$observedStat), size = 2)
library(ggplot)
library(ggplot2)
permDist <- data.frame(AbsCorrDiff = ptestOut$permutationDistribution)
m <- ggplot(permDist, aes(x = AbsCorrDiff))
m + geom_density(size = 2, fill = "lightblue") + geom_vline(xintercept = max(ptestOut$observedStat), size = 2)
graphVis3D(ptestOut$pvalues, roiNames, .01, col = "darkblue", lwd = 2)
graphVis(ttestPvalue, roiNames, .01, col = "darkblue", lwd = 2)
devtools::load_all(".")
graphVis3D
graphVis3D(ptestOut$pvalues, roiNames, .01, col = "darkblue", lwd = 2)
roiImage <- f.read.analyze.volume(file= "JHU_MNI_SS_WMPM_TypeII_temp_insula_lima_a.img")[,,,1]
roiImage <- f.read.analyze.volume(file= "/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/JHU_MNI_SS_WMPM_TypeII_temp_insula_lima_a.img")[,,,1]
templateImage <- f.read.analyze.volume(file = "/Users/Brian/Google Drive/Work/Research/Investigators/Kyrana/Eva_T1.img")[,,,1]
templateBrainGraphVis(pvalues = ttestPvalue,
cutoff = .01,
templateImage = templateImage,
roiImage = roiImage,
roiNumbers = roiNumbers,
roiNames,
lwd = 2,
col = "lightblue")
roiStamperOuter <- function(file_list, roifile,  type = "mean", bg.value = NA){
nfiles = length(file_list)
roi = readNIfTI(roifile, reorient=FALSE)
ulev = sort(unique(c(roi)))
#     bg.value = NA
ulev = ulev[ !(ulev %in% bg.value) ]
roi.ind = lapply(ulev, function(lev){
which(roi %in% lev, arr.ind=FALSE)
})
ifile = 1;
cor.res = l.res = vector(mode="list", length = nfiles)
#   pb = txtProgressBar(min=0, max=nfiles,initial=0)
for (ifile in seq(nfiles)){
print(ifile)
img = readNIfTI(file_list[ifile], reorient=FALSE)
### V by T
mat = matrix(img, nrow=prod(dim(img)[1:3]), ncol=ntim(img))
### double check
x = img[,,,1]
stopifnot(all(x == mat[,1]))
# [1] TRUE
### resmat is T by R (n roi)
resmat = sapply(roi.ind, function(indices){
m = mat[indices,, drop=FALSE]
res = switch(type,
"median" = apply(m, 2, median),
"mean"= colMeans(m),
)
})
#     colnames(resmat) = ulev
l.res[[ifile]] = resmat
}
names(l.res) = file_list
return(list(l.res=l.res, ulev = ulev))
}
#
fileList <- c(
"/Users/Brian/Documents/GitHub/brisk/cigar/data/0010001.1.1.nyu.nii.gz",
"/Users/Brian/Documents/GitHub/brisk/cigar/data/0010002.1.1.nyu.nii.gz",
"/Users/Brian/Documents/GitHub/brisk/cigar/data/0010003.1.1.nyu.nii.gz"
)
roiFile <- "/Users/Brian/Documents/GitHub/brisk/cigar/data/M1_clusters_3mm.nii"
out <- roiStamperOuter(fileList, roiFile)
library(oro.nifit)
library(oro.nifti)
out <- roiStamperOuter(fileList, roiFile)
corCreate <- function(fileList = NULL, rsoOut = NULL, path = "./",
loadFunction = read.csv,
transpose = FALSE,
what = cor,
asMatrix = TRUE,
columns = NULL,
columnNames = NULL,
cores = 1,
...){
if (is.null(fileList) & is.null(rsoOut)) stop("one of fileList or rsoOut must be non null")
else if (!is.null(fileList) & !is.null(rsoOut)) stop("one of fileList or rsoOut must be null")
if (!is.null(fileList)){
##the fileList with the paths appended
filesFullPath <- paste(path, "/", fileList, sep = "")
##stop if the files don't all exist
stopifnot(all(sapply(filesFullPath, file.exists)))
##read in the data
dat <- lapply(filesFullPath, function(filename) loadFunction(filename, ...))
}
else dat <- rsoOut$l.res
if (transpose) dat <- lapply(dat, t)
##check to make sure everything has the same number of columns
cols <- sapply(dat, ncol)
if (length(unique(cols)) > 1) {
print(data.frame(file = filesFullPath, columns = cols))
stop("Files do not all have the same number of columns")
}
##if no columns are specified use all
if (!is.null(columns)) {
dat <- lapply(dat, function(datEl) datEl[, columns])
}
else columns <- 1 : cols[1]
##apply the column names if asked
if (!is.null(columnNames)){
if (length(columnNames) != length(columns)){
stop("columnNames of a different length than the number of specified columns")
}
dat <- lapply(dat, function(datEl) {colnames(datEl) <- columnNames; datEl})
}
if (cores > 1) {
cl <- makeCluster(getOption("cl.cores", cores))
out <- parLapply(cl, dat, what)
}
else if (cores == 1) {
out <- lapply(dat, what)
}
names(out) <- fileList
if (asMatrix) out <- t(sapply(out, cor2vec))
if (cores > 1) stopCluster(cl)
return(out)
}
test <- corCreate(rsoOut = out)
devtools::load_all(".")
corCreate <- function(fileList = NULL, rsoOut = NULL, path = "./",
test <- corCreate(rsoOut = out)
dim(test)
test
rownames(out$l.res)
setwd("~/GitHub/brisk/cigar2")
runApp()
library(shiny)
runApp()
save(out, file = "testROISTAMPEROUT.rda")
runApp()
runApp()
runApp()
rm(test)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/GitHub/brisk/cigar2")
runApp()
library(shiny)
runApp()
runApp()
runApp()
load("testROISTAMPEROUT.rda")
runApp()
corCreate
library(brisk)
runApp()
load("C:/Users/Brian/Downloads/output.rda")
dat
choose(5, 2)
choose(6, 2)
library(rsfmriGraph)
library("caTools", lib.loc="C:/Users/Brian/Documents/R/win-library/3.0")
detach("package:caTools", unload=TRUE)
detach("package:brisk", unload=TRUE)
library(glasso)
install.packages("glasso")
library(devtools)
install_github("fslr", "muschellij2")
load(fslr)
library(fslr)
?fslr
get.fsloutput
get.fsloutput()
install.packages("swirl")
swirl()
library(swirl)
swirl()
bye()
install_from_swirl("Regression Models")
swirl()
install_from_swirl("Data Analysis")
swirl()
?swirl
install_github("swirldev/swirl")
install_github("swirldev/swirlify")
author_lesson("Basic arithmetic in R", "A Gentle Intro to R", "new_course = TRUE")
?swirlify
??swirlify
getwd()
runApp()
